/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/assets/js/app.js":
/*!******************************!*\
  !*** ./src/assets/js/app.js ***!
  \******************************/
/***/ (function() {

eval("console.log('file 1');\r\n\n\n//# sourceURL=webpack://brainscloud/./src/assets/js/app.js?");

/***/ }),

/***/ "./src/assets/js/file2.js":
/*!********************************!*\
  !*** ./src/assets/js/file2.js ***!
  \********************************/
/***/ (function() {

eval("console.log('file 2');\r\n\n\n//# sourceURL=webpack://brainscloud/./src/assets/js/file2.js?");

/***/ }),

/***/ "./src/assets/js/form.js":
/*!*******************************!*\
  !*** ./src/assets/js/form.js ***!
  \*******************************/
/***/ (function() {

"use strict";
eval("\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    const form = document.getElementById('form');\r\n    form.addEventListener('submit', formSend);\r\n\r\n    async function formSend(e) {\r\n        e.preventDefault();\r\n\r\n        let error = formValidate(form);\r\n\r\n        let formData = new formData(form);\r\n        if(error === 0) {\r\n            let response = await fetch('sendmail.php', {\r\n                method: 'POST',\r\n                body: formData\r\n            });\r\n            if (response.ok) {\r\n                let result = await response.json();\r\n                alert(result.message);\r\n                form.reset();\r\n            } else {\r\n                alert(\"Error\");\r\n            }\r\n        } else {\r\n            alert('Заполните обязательные поля');\r\n        }\r\n    }\r\n\r\n    function formValidate(form) {\r\n        let error = 0;\r\n        let formReq = document.querySelectorAll('._req');\r\n\r\n        for (let index = 0; index < formReq.length; index++) {\r\n            const input = formReq[index];\r\n            formRemoveError(input);\r\n\r\n            if (input.classList.contains('_email')) {\r\n                if (emailTest(input)) {\r\n                    formAddError(input);\r\n                    error++;\r\n                }\r\n            } else if (input.getAttribute(\"type\") === \"checkbox\" && input.checked === false) {\r\n                formAddError(input);\r\n                error++;\r\n            } else {\r\n                if (input.value === '') {\r\n                    formAddError(input);\r\n                    error++;\r\n                }\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n\r\n    function formAddError(input) {\r\n        input.parentElement.classList.add('_error');\r\n        input.classList.add('_error');\r\n    }\r\n\r\n    function formRemoveError(input) {\r\n        input.parentElement.classList.remove('_error');\r\n        input.classList.remove('_error');\r\n    }\r\n    \r\n    //Function test email\r\n    function emailTest(input) {\r\n        return !/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2.8})+$/.test(input.value);\r\n    }\r\n});\n\n//# sourceURL=webpack://brainscloud/./src/assets/js/form.js?");

/***/ }),

/***/ "./src/assets/js/slider.js":
/*!*********************************!*\
  !*** ./src/assets/js/slider.js ***!
  \*********************************/
/***/ (function() {

eval("/**\r\n * SimpleAdaptiveSlider by Itchief v2.0.0 (https://github.com/itchief/ui-components/tree/master/simple-adaptive-slider)\r\n * Copyright 2020 - 2021 Alexander Maltsev\r\n * Licensed under MIT (https://github.com/itchief/ui-components/blob/master/LICENSE)\r\n */\r\n\r\n document.addEventListener('DOMContentLoaded', function () {\r\n    // инициализация слайдера\r\n    var slider = new SimpleAdaptiveSlider('.slider', {\r\n      autoplay: true,\r\n      interval: 10000,\r\n    });\r\n  });\r\n\r\n\r\n (function() {\r\n    if (typeof window.CustomEvent === 'function' ) return false;\r\n    function CustomEvent(event, params) {\r\n      params = params || {bubbles: false, cancelable: false, detail: null};\r\n      var e = document.createEvent('CustomEvent');\r\n      e.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n      return e;\r\n    }\r\n    window.CustomEvent = CustomEvent;\r\n  })();\r\n  \r\n  // базовые классы и селекторы\r\n  var WRAPPER_SELECTOR = '.slider__wrapper';\r\n  var ITEMS_SELECTOR = '.slider__items';\r\n  var ITEM_SELECTOR = '.slider__item';\r\n  var ITEM_CLASS_ACTIVE = 'slider__item_active';\r\n  var CONTROL_SELECTOR = '.slider__control';\r\n  var CONTROL_CLASS_SHOW = 'slider__control_show';\r\n  // индикаторы\r\n  var INDICATOR_WRAPPER_ELEMENT = 'ol';\r\n  var INDICATOR_WRAPPER_CLASS = 'slider__indicators';\r\n  var INDICATOR_ITEM_ELEMENT = 'li';\r\n  var INDICATOR_ITEM_CLASS = 'slider__indicator';\r\n  var INDICATOR_ITEM_CLASS_ACTIVE = 'slider__indicator_active';\r\n  // порог для переключения слайда (40%)\r\n  var SWIPE_THRESHOLD = 20;\r\n  // класс для отключения transition\r\n  var TRANSITION_NONE = 'transition-none';\r\n  \r\n  function SimpleAdaptiveSlider(selector, config) {\r\n    // .slider\r\n    this._$root = document.querySelector(selector);\r\n    // .slider__wrapper\r\n    this._$wrapper = this._$root.querySelector(WRAPPER_SELECTOR);\r\n    // .slider__items\r\n    this._$items = this._$root.querySelector(ITEMS_SELECTOR);\r\n    // .slider__item\r\n    this._$itemList = this._$root.querySelectorAll(ITEM_SELECTOR);\r\n    // текущий индекс\r\n    this._currentIndex = 0;\r\n    // экстремальные значения слайдов\r\n    this._minOrder = 0;\r\n    this._maxOrder = 0;\r\n    this._$itemWithMinOrder = null;\r\n    this._$itemWithMaxOrder = null;\r\n    this._minTranslate = 0;\r\n    this._maxTranslate = 0;\r\n    // направление смены слайдов (по умолчанию)\r\n    this._direction = 'next';\r\n    // флаг, который показывает, что идёт процесс уравновешивания слайдов\r\n    this._balancingItemsFlag = false;\r\n    // текущее значение трансформации\r\n    this._transform = 0;\r\n    // swipe параметры\r\n    this._hasSwipeState = false;\r\n    this._swipeStartPosX = 0;\r\n    // id таймера\r\n    this._intervalId = null;\r\n    // конфигурация слайдера (по умолчанию)\r\n    this._config = {\r\n      loop: true,\r\n      autoplay: false,\r\n      interval: 5000,\r\n      swipe: true,\r\n    };\r\n    // изменяем конфигурацию слайдера в соответствии с переданными настройками\r\n    for (var key in config) {\r\n      if (this._config.hasOwnProperty(key)) {\r\n        this._config[key] = config[key];\r\n      }\r\n    }\r\n    // добавляем к слайдам data-атрибуты\r\n    for (var i = 0, length = this._$itemList.length; i < length; i++) {\r\n      this._$itemList[i].dataset.order = i;\r\n      this._$itemList[i].dataset.index = i;\r\n      this._$itemList[i].dataset.translate = 0;\r\n    }\r\n    // перемещаем последний слайд перед первым\r\n    if (this._config.loop) {\r\n      var count = this._$itemList.length - 1;\r\n      var translate = -this._$itemList.length * 100;\r\n      this._$itemList[count].dataset.order = -1;\r\n      this._$itemList[count].dataset.translate = -this._$itemList.length * 100;\r\n      var transformValue = 'translateX('.concat(translate, '%)');\r\n      this._$itemList[count].style.transform = transformValue;\r\n    }\r\n    // добавляем индикаторы к слайдеру\r\n    this._addIndicators();\r\n    // обновляем экстремальные значения переменных\r\n    this._refreshExtremeValues();\r\n    // помечаем активные элементы\r\n    this._setActiveClass();\r\n    // назначаем обработчики\r\n    this._addEventListener();\r\n    // запускаем автоматическую смену слайдов\r\n    this._autoplay();\r\n  }\r\n  \r\n  // set active class\r\n  SimpleAdaptiveSlider.prototype._setActiveClass = function() {\r\n    // slides\r\n    var i;\r\n    var length;\r\n    var $item;\r\n    var index;\r\n    for (i = 0, length = this._$itemList.length; i < length; i++) {\r\n      $item = this._$itemList[i];\r\n      index = parseInt($item.dataset.index);\r\n      if (this._currentIndex === index) {\r\n        $item.classList.add(ITEM_CLASS_ACTIVE);\r\n      } else {\r\n        $item.classList.remove(ITEM_CLASS_ACTIVE);\r\n      }\r\n    }\r\n    // indicators\r\n    var $indicators = this._$root.querySelectorAll('.' + INDICATOR_ITEM_CLASS);\r\n    if ($indicators.length) {\r\n      for (i = 0, length = $indicators.length; i < length; i++) {\r\n        $item = $indicators[i];\r\n        index = parseInt($item.dataset.slideTo);\r\n        if (this._currentIndex === index) {\r\n          $item.classList.add(INDICATOR_ITEM_CLASS_ACTIVE);\r\n        } else {\r\n          $item.classList.remove(INDICATOR_ITEM_CLASS_ACTIVE);\r\n        }\r\n      }\r\n    }\r\n    // controls\r\n    var $controls = this._$root.querySelectorAll(CONTROL_SELECTOR);\r\n    if (!$controls.length) {\r\n      return;\r\n    }\r\n    if (this._config.loop) {\r\n      for (i = 0, length = $controls.length; i < length; i++) {\r\n        $controls[i].classList.add(CONTROL_CLASS_SHOW);\r\n      }\r\n    } else {\r\n      if (this._currentIndex === 0) {\r\n        $controls[0].classList.remove(CONTROL_CLASS_SHOW);\r\n        $controls[1].classList.add(CONTROL_CLASS_SHOW);\r\n      } else if (this._currentIndex === this._$itemList.length - 1) {\r\n        $controls[0].classList.add(CONTROL_CLASS_SHOW);\r\n        $controls[1].classList.remove(CONTROL_CLASS_SHOW);\r\n      } else {\r\n        $controls[0].classList.add(CONTROL_CLASS_SHOW);\r\n        $controls[1].classList.add(CONTROL_CLASS_SHOW);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // смена слайдов\r\n  SimpleAdaptiveSlider.prototype._move = function() {\r\n    if (this._direction === 'none') {\r\n      this._$items.classList.remove(TRANSITION_NONE);\r\n      this._$items.style.transform = 'translateX('.concat(this._transform, '%)');\r\n      return;\r\n    }\r\n    if (!this._config.loop) {\r\n      var condition = this._currentIndex + 1 >= this._$itemList.length;\r\n      if (condition && this._direction === 'next') {\r\n        this._autoplay('stop');\r\n        return;\r\n      }\r\n      if (this._currentIndex <= 0 && this._direction === 'prev') {\r\n        return;\r\n      }\r\n    }\r\n    var step = this._direction === 'next' ? -100 : 100;\r\n    var transform = this._transform + step;\r\n    if (this._direction === 'next') {\r\n      if (++this._currentIndex > this._$itemList.length - 1) {\r\n        this._currentIndex -= this._$itemList.length;\r\n      }\r\n    } else {\r\n      if (--this._currentIndex < 0) {\r\n        this._currentIndex += this._$itemList.length;\r\n      }\r\n    }\r\n    this._transform = transform;\r\n    this._$items.style.transform = 'translateX('.concat(transform, '%)');\r\n    this._setActiveClass();\r\n  };\r\n  \r\n  // функция для перемещения к слайду по индексу\r\n  SimpleAdaptiveSlider.prototype._moveTo = function(index) {\r\n    var currentIndex = this._currentIndex;\r\n    this._direction = index > currentIndex ? 'next' : 'prev';\r\n    for (var i = 0; i < Math.abs(index - currentIndex); i++) {\r\n      this._move();\r\n    }\r\n  };\r\n  \r\n  // метод для автоматической смены слайдов\r\n  SimpleAdaptiveSlider.prototype._autoplay = function(action) {\r\n    if (!this._config.autoplay) {\r\n      return;\r\n    }\r\n    if (action === 'stop') {\r\n      clearInterval(this._intervalId);\r\n      this._intervalId = null;\r\n      return;\r\n    }\r\n    if (this._intervalId === null) {\r\n      this._intervalId = setInterval(function() {\r\n        this._direction = 'next';\r\n        this._move();\r\n      }.bind(this),\r\n      this._config.interval\r\n      );\r\n    }\r\n  };\r\n  \r\n  // добавление индикаторов\r\n  SimpleAdaptiveSlider.prototype._addIndicators = function() {\r\n    if (this._$root.querySelector('.' + INDICATOR_WRAPPER_CLASS)) {\r\n      return;\r\n    }\r\n    var $wrapper = document.createElement(INDICATOR_WRAPPER_ELEMENT);\r\n    $wrapper.className = INDICATOR_WRAPPER_CLASS;\r\n    for (var i = 0, length = this._$itemList.length; i < length; i++) {\r\n      var $item = document.createElement(INDICATOR_ITEM_ELEMENT);\r\n      $item.className = INDICATOR_ITEM_CLASS;\r\n      $item.dataset.slideTo = i;\r\n      $wrapper.appendChild($item);\r\n    }\r\n    this._$root.appendChild($wrapper);\r\n  };\r\n  \r\n  // refresh extreme values\r\n  SimpleAdaptiveSlider.prototype._refreshExtremeValues = function() {\r\n    var $itemList = this._$itemList;\r\n    this._minOrder = parseInt($itemList[0].dataset.order);\r\n    this._maxOrder = this._minOrder;\r\n    this._$itemWithMinOrder = $itemList[0];\r\n    this._$itemWithMaxOrder = this._$itemWithMinOrder;\r\n    this._minTranslate = parseInt($itemList[0].dataset.translate);\r\n    this._maxTranslate = this._minTranslate;\r\n    for (var i = 0, length = $itemList.length; i < length; i++) {\r\n      var $item = $itemList[i];\r\n      var order = parseInt($item.dataset.order);\r\n      if (order < this._minOrder) {\r\n        this._minOrder = order;\r\n        this._$itemWithMinOrder = $item;\r\n        this._minTranslate = parseInt($item.dataset.translate);\r\n      } else if (order > this._maxOrder) {\r\n        this._maxOrder = order;\r\n        this._$itemWithMaxOrder = $item;\r\n        this._maxTranslate = parseInt($item.dataset.translate);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // balancing items\r\n  SimpleAdaptiveSlider.prototype._balancingItems = function() {\r\n    if (!this._balancingItemsFlag) {\r\n      return;\r\n    }\r\n    var $wrapper = this._$wrapper;\r\n    var wrapperRect = $wrapper.getBoundingClientRect();\r\n    var halfWidthItem = wrapperRect.width / 2;\r\n    var count = this._$itemList.length;\r\n    var translate;\r\n    var clientRect;\r\n    if (this._direction === 'next') {\r\n      var wrapperLeft = wrapperRect.left;\r\n      var $min = this._$itemWithMinOrder;\r\n      translate = this._minTranslate;\r\n      clientRect = $min.getBoundingClientRect();\r\n      if (clientRect.right < wrapperLeft - halfWidthItem) {\r\n        $min.dataset.order = this._minOrder + count;\r\n        translate += count * 100;\r\n        $min.dataset.translate = translate;\r\n        $min.style.transform = 'translateX('.concat(translate, '%)');\r\n        this._refreshExtremeValues();\r\n      }\r\n    } else if (this._direction === 'prev') {\r\n      var wrapperRight = wrapperRect.right;\r\n      var $max = this._$itemWithMaxOrder;\r\n      translate = this._maxTranslate;\r\n      clientRect = $max.getBoundingClientRect();\r\n      if (clientRect.left > wrapperRight + halfWidthItem) {\r\n        $max.dataset.order = this._maxOrder - count;\r\n        translate -= count * 100;\r\n        $max.dataset.translate = translate;\r\n        $max.style.transform = 'translateX('.concat(translate, '%)');\r\n        this._refreshExtremeValues();\r\n      }\r\n    }\r\n    requestAnimationFrame(this._balancingItems.bind(this));\r\n  };\r\n  \r\n  // adding listeners\r\n  SimpleAdaptiveSlider.prototype._addEventListener = function() {\r\n    var $items = this._$items;\r\n    function onClick(e) {\r\n      var $target = e.target;\r\n      this._autoplay('stop');\r\n      if ($target.classList.contains('slider__control')) {\r\n        e.preventDefault();\r\n        this._direction = $target.dataset.slide;\r\n        this._move();\r\n      } else if ($target.dataset.slideTo) {\r\n        e.preventDefault();\r\n        var index = parseInt($target.dataset.slideTo);\r\n        this._moveTo(index);\r\n      }\r\n      if (this._config.loop) {\r\n        this._autoplay();\r\n      }\r\n    }\r\n    function onTransitionStart() {\r\n      this._balancingItemsFlag = true;\r\n      window.requestAnimationFrame(this._balancingItems.bind(this));\r\n    }\r\n    function onTransitionEnd() {\r\n      this._balancingItemsFlag = false;\r\n      this._$root.dispatchEvent(new CustomEvent('slider.transition.end',\r\n          {bubbles: true}));\r\n    }\r\n    function onMouseEnter() {\r\n      this._autoplay('stop');\r\n    }\r\n    function onMouseLeave() {\r\n      if (this._config.loop) {\r\n        this._autoplay();\r\n      }\r\n    }\r\n    function onSwipeStart(e) {\r\n      this._autoplay('stop');\r\n      var event = e.type.search('touch') === 0 ? e.touches[0] : e;\r\n      this._swipeStartPosX = event.clientX;\r\n      this._swipeStartPosY = event.clientY;\r\n      this._hasSwipeState = true;\r\n      this._hasSwiping = false;\r\n    }\r\n    function onSwipeMove(e) {\r\n      if (!this._hasSwipeState) {\r\n        return;\r\n      }\r\n      var event = e.type.search('touch') === 0 ? e.touches[0] : e;\r\n      var diffPosX = this._swipeStartPosX - event.clientX;\r\n      var diffPosY = this._swipeStartPosY - event.clientY;\r\n      if (!this._hasSwiping) {\r\n        if (Math.abs(diffPosY) > Math.abs(diffPosX)) {\r\n          this._hasSwipeState = false;\r\n          return;\r\n        }\r\n        this._hasSwiping = true;\r\n      }\r\n      e.preventDefault();\r\n      if (!this._config.loop) {\r\n        if (this._currentIndex + 1 >= this._$itemList.length && diffPosX >= 0) {\r\n          diffPosX = diffPosX / 4;\r\n        }\r\n        if (this._currentIndex <= 0 && diffPosX <= 0) {\r\n          diffPosX = diffPosX / 4;\r\n        }\r\n      }\r\n      var value = (diffPosX / this._$wrapper.getBoundingClientRect().width) * 100;\r\n      var translateX = this._transform - value;\r\n      this._$items.classList.add(TRANSITION_NONE);\r\n      this._$items.style.transform = 'translateX('.concat(translateX, '%)');\r\n    }\r\n    function onSwipeEnd(e) {\r\n      if (!this._hasSwipeState) {\r\n        return;\r\n      }\r\n      var event = e.type.search('touch') === 0 ? e.changedTouches[0] : e;\r\n      var diffPosX = this._swipeStartPosX - event.clientX;\r\n      if (!this._config.loop) {\r\n        if (this._currentIndex + 1 >= this._$itemList.length && diffPosX >= 0) {\r\n          diffPosX = diffPosX / 4;\r\n        }\r\n        if (this._currentIndex <= 0 && diffPosX <= 0) {\r\n          diffPosX = diffPosX / 4;\r\n        }\r\n      }\r\n      var value = (diffPosX / this._$wrapper.getBoundingClientRect().width) * 100;\r\n      this._$items.classList.remove(TRANSITION_NONE);\r\n      if (value > SWIPE_THRESHOLD) {\r\n        this._direction = 'next';\r\n        this._move();\r\n      } else if (value < -SWIPE_THRESHOLD) {\r\n        this._direction = 'prev';\r\n        this._move();\r\n      } else {\r\n        this._direction = 'none';\r\n        this._move();\r\n      }\r\n      this._hasSwipeState = false;\r\n      if (this._config.loop) {\r\n        this._autoplay();\r\n      }\r\n    }\r\n    function onDragStart(e) {\r\n      e.preventDefault();\r\n    }\r\n    function onVisibilityChange() {\r\n      if (document.visibilityState === 'hidden') {\r\n        this._autoplay('stop');\r\n      } else if (document.visibilityState === 'visible') {\r\n        if (this._config.loop) {\r\n          this._autoplay();\r\n        }\r\n      }\r\n    }\r\n    // click\r\n    this._$root.addEventListener('click', onClick.bind(this));\r\n    // transitionstart and transitionend\r\n    if (this._config.loop) {\r\n      $items.addEventListener('transitionstart', onTransitionStart.bind(this));\r\n      $items.addEventListener('transitionend', onTransitionEnd.bind(this));\r\n    }\r\n    // mouseenter and mouseleave\r\n    if (this._config.autoplay) {\r\n      this._$root.addEventListener('mouseenter', onMouseEnter.bind(this));\r\n      this._$root.addEventListener('mouseleave', onMouseLeave.bind(this));\r\n    }\r\n    // swipe\r\n    if (this._config.swipe) {\r\n      var supportsPassive = false;\r\n      try {\r\n        var opts = Object.defineProperty({}, 'passive', {\r\n          get: function() {\r\n            supportsPassive = true;\r\n          },\r\n        });\r\n        window.addEventListener('testPassiveListener', null, opts);\r\n      } catch (err) {}\r\n      this._$root.addEventListener('touchstart', onSwipeStart.bind(this),\r\n           supportsPassive ? {passive: false} : false);\r\n      this._$root.addEventListener('touchmove', onSwipeMove.bind(this),\r\n           supportsPassive ? {passive: false} : false);\r\n      this._$root.addEventListener('mousedown', onSwipeStart.bind(this));\r\n      this._$root.addEventListener('mousemove', onSwipeMove.bind(this));\r\n      document.addEventListener('touchend', onSwipeEnd.bind(this));\r\n      document.addEventListener('mouseup', onSwipeEnd.bind(this));\r\n    }\r\n    this._$root.addEventListener('dragstart', onDragStart.bind(this));\r\n    // при изменении активности вкладки\r\n    document.addEventListener('visibilitychange', onVisibilityChange.bind(this));\r\n  };\r\n  \r\n  // перейти к следующему слайду\r\n  SimpleAdaptiveSlider.prototype.next = function() {\r\n    this._direction = 'next';\r\n    this._move();\r\n  };\r\n  \r\n  // перейти к предыдущему слайду\r\n  SimpleAdaptiveSlider.prototype.prev = function() {\r\n    this._direction = 'prev';\r\n    this._move();\r\n  };\r\n  \r\n  // управление автоматической сменой слайдов\r\n  SimpleAdaptiveSlider.prototype.autoplay = function(action) {\r\n    this._autoplay('stop');\r\n  };\r\n  \n\n//# sourceURL=webpack://brainscloud/./src/assets/js/slider.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./src/assets/js/app.js"]();
/******/ 	__webpack_modules__["./src/assets/js/file2.js"]();
/******/ 	__webpack_modules__["./src/assets/js/form.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/assets/js/slider.js"]();
/******/ 	
/******/ })()
;